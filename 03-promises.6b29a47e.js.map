{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAkBF,SAASC,cAAc,uBACzCE,EAAYH,SAASC,cAAc,sBACnCG,EAASJ,SAASC,cAAc,wBAEtC,SAASI,EAAcC,EAAUC,GAE7B,OAAK,IAAIC,SAAQ,SAACC,EAASC,GAE1BC,YAAU,WAEaC,KAAKC,SAAW,GAKpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIPR,EAAKe,iBAAiB,UAAU,SAAAC,GAE9BA,EAAEC,iBAGF,IADA,IAAIC,EAAQC,SAAShB,EAAgBiB,OAC5BC,EAAI,EAAGA,GAAKhB,EAAOe,MAAOC,IAE7Bf,EAAUe,EAAGH,GACdI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MAEjBgB,EAAA1B,GAAS2B,OAAOC,QACd,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAI/CoB,OAAI,SAAAL,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MAElBgB,EAAA1B,GAAS2B,OAAOI,QACd,sBAAuCF,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAIhDU,GAAMC,SAASf,EAAUgB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('form'); //dobranie sie do formularza//\nconst inputFirstDelay = document.querySelector('input[name=\"delay\"]'); //dobranie sie do inputa 1-opoznienie pierwsze//\nconst delayStep = document.querySelector('input[name=\"step\"]'); //dobranie sie do inputa 2-opoznienie//\nconst amount = document.querySelector('input[name=\"amount\"]'); //dobranie sie do inputa 3-ilosc//\n\nfunction createPromise(position, delay) {\n  //stworzenie funkcji z argumentami: pozycja(liczba) i opóźnienie\n  return new Promise((resolve, reject) => {\n    //zwraca nowy promise (rozwiązany, odrzucony)\n    setTimeout(() => {\n      //opoznienie czasowe po jakim funkcja sie wykonuje\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        //jeśli warunek shouldResolve zostal spelniony, czyli jesli komp wylosuje liczbe wieksza od 0.3 i miejsza od 1...\n        // Fulfill//\n        resolve({ position, delay }); //...to promise jest rozwiązany i zwraca nam pozycję i opoznienie\n      } else {\n        // Reject//\n        reject({ position, delay }); //...w przeciwnym razie jest odrzucony i tez zwraca nam pozycje i opoznienie\n      }\n    }, delay); //wartosc opoznienia z setTimeout\n  });\n}\n\nform.addEventListener('submit', e => {\n  // dodajemy listener (submit) do formularza\n  e.preventDefault(); //usuwamy domyslne dzialanie przegladarki\n\n  let delay = parseInt(inputFirstDelay.value); //tworzmy zmienna, wartosc pierwszego inputu (opoznienie) parsujemy tekst na liczbe calkowita\n  for (let i = 1; i <= amount.value; i++) {\n    //pętla, ilość promisów i dodawanie po 1\n    createPromise(i, delay) //odwolanie do funkcji createPromise,\n      .then(({ position, delay }) => {\n        // then obsługuje pomyslne wykonanie promise. Normalnie byłby console.log(`✅ Fulfilled promise ${position} in ${delay}ms`); ale korzystamy z biblioteki i jest tak:\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      }) //ukazuje nam sie komunikat \"✅ Fulfilled promise (POZYCJA) in (OPOZNIENIE)\"\n\n      .catch(({ position, delay }) => {\n        // catch obsługuje wyłapywanie blędów\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }); //jw, Normalnie byłby console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n\n    delay += parseInt(delayStep.value); //całkowite opoznienie=opoznienie+wartość drugiego opoznienia\n    //delay=delay+parseInt(delayStep.value);\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputFirstDelay","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","delay1","parseInt","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6b29a47e.js.map"}